services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
      - "8080:8080"
      - "50051:50051"
    env_file:
      - ./cmd/ordersystem/.env
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    tty: true
    stdin_open: true

  mysql:
    image: mysql:8.0  # Atualizado para 8.0 para melhor suporte e segurança
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: orders
      MYSQL_PASSWORD: root
    ports:
      - 3306:3306
    volumes:
      - mysql_data:/var/lib/mysql  # Usar volume nomeado em vez de diretório local
      - ./internal/infra/database/migrations:/docker-entrypoint-initdb.d
    command: --innodb-use-native-aio=0  # Evita problemas de AIO em ARM64
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot"]
      interval: 5s
      timeout: 5s
      retries: 20

  rabbitmq:
    image: rabbitmq:3.13-management  # Versão específica para consistência
    container_name: rabbitmq
    restart: always
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_LOG_LEVEL: debug  # Adicionado para facilitar debug
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq  # Volume nomeado para persistência
      - rabbitmq_log:/var/log/rabbitmq   # Volume nomeado para logs
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf  # Configuração para evitar erros
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 5s
      timeout: 5s
      retries: 20

volumes:
  mysql_data:  # Volume nomeado para MySQL
  rabbitmq_data:  # Volume nomeado para RabbitMQ
  rabbitmq_log:  # Volume nomeado para logs do RabbitMQ